<?php
namespace PHPUnitHelper\Generator;

use PHPUnitHelper\Syntax\PHPMethod;
use PHPUnitHelper\Syntax\PHPClass;
use PHPUnitHelper\Syntax\PHPTrait;
use PHPUnitHelper\Util\StringUtil;

class SkeletonGenerator
{

    const INDENT_DEPTH = 4;

    public function generateMethodSkeleton(PHPMethod $method, $className = '')
    {
        $arguments = $method->getArguments();

        $argumentsCode = "";
        foreach ($arguments as $argument) {
            $type = $argument->getType();
            $name = $argument->getName();

            $default = 'null';
            if ($type == '') {
                $default = "''";
            } elseif ($type == 'array') {
                $default = 'array()';
            }
            $argumentsCode .= "$name = $default;\n";
        }

        $actualCode = '';
        if ($method->isStatic()) {

            $methodCallArgumentsCode = '';
            foreach ($method->getArguments() as $arg) {
                $argName = $arg->getName();
                if ($methodCallArgumentsCode !== '') {
                    $methodCallArgumentsCode .= ', ';
                }
                $methodCallArgumentsCode .= $argName;
            }

            $methodName = $method->getName();
            $staticMethodCall = $className . '::' . $methodName . "($methodCallArgumentsCode)";

            $actualCode .= "// \$actual = $staticMethodCall;\n";
            $actualCode = StringUtil::indent($actualCode, 4);
        }

        if ($argumentsCode) {
            $indentedArgumentsCode = StringUtil::indent($argumentsCode, self::INDENT_DEPTH);
        } else {
            $indentedArgumentsCode = '';
        }


        return
            "/**\n" .
            " * @TODO This method was generated by PHPUnitHelper\n" .
            " */\n" .
            "public function test" . ucfirst($method->getName()) . "()\n" .
            "{\n" .
            "$indentedArgumentsCode" .
            "    // \$expected =\n" .
            "$actualCode" .
            "    // \$this->assertEquals(\$expected, \$actual);\n" .
            "}\n";
    }

    public function generateClassSkeletonFromPHPClass(PHPClass $class)
    {
        $className = $class->getName();
        $methods = $class->getMethods();
        $namespace = $class->getNamespace();

        return $this->generateClassSkelton($methods, $className, $namespace);
    }

    public function generateClassSkeletonFromPHPTrait(PHPTrait $class)
    {
        $className = $class->getName();
        $methods = $class->getMethods();
        $namespace = $class->getNamespace();

        return $this->generateClassSkelton($methods, $className, $namespace);
    }

    private function generateClassSkelton($methods, $className, $namespace)
    {
        $methodCode = '';
        foreach ($methods as $method) {
            $methodCode .= $this->generateMethodSkeleton($method, $className);
            if ($methodCode !== '') {
                $methodCode .= "\n";
            }
        }
        $indentedMethodCode = StringUtil::indent($methodCode, self::INDENT_DEPTH);


        $namespaceCode = '';

        if ($namespace !== 'global') {
            $namespaceCode = "namespace $namespace;\n\n";
        }

        $testClassName = $className . "Test";

        return
            "<?php\n" .
            $namespaceCode .
            "class $testClassName extends \\PHPUnit_Framework_TestCase\n" .
            "{\n" .
            "\n" .
            "$indentedMethodCode" .
            "\n" .
            "}\n";
    }

}